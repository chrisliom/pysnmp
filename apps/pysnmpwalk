#!/usr/bin/env python
"""
   Retrieve a subtree of lexicographically greater Object IDs starting from
   user specifed SNMP Object ID from arbitrary SNMP agent.

   Since MIB parser is not yet implemented in Python, this script takes and
   reports Object IDs in dotted numeric representation only.

   Copyright 1999-2003 by Ilya Etingof <ilya@glas.net>. See LICENSE for
   details.
"""
from string import split
from sys import exit, argv, stderr
from pysnmp.error import PySnmpError
from pysnmp.proto import v1, v2c
from pysnmp.mapping.udp import role
import pysnmp.mapping.udp.cli.ucd
import pysnmp.proto.api.alpha
import pysnmp.proto.cli.ucd

# Defaults
snmpProto = v1
snmpTrans = role

# Initialize help messages
appUsage = '[ -h ] [ -v <version> ] [ -R ] [ -C <p|i|c> ]'
appOpts =           ' -h             print this usage note.\n'
appOpts = appOpts + ' -v <version>   SNMP version to use [%s].\n' % \
          split(snmpProto.__name__, '.')[-1]
appOpts = appOpts + ' -R             report variables types on output.\n'
appOpts = appOpts + ' -C <p|i|c>     application specific options\n'
appOpts = appOpts + '                p:  print the number of variables found\n'
appOpts = appOpts + '                i:  include given OID in search range\n'
appOpts = appOpts + '                c:  do not check returned OIDs are increasing\n'
usage = 'Usage: ' + argv[0] + ' ' + appUsage + ' ' + \
        snmpTrans.Manager().cliUcdGetUsage() + ' ' + \
        snmpProto.GetNextRequest().cliUcdGetUsage() + '\n'
options = 'Application options:\n' + \
          appOpts + \
          'Transport options:\n' + \
          snmpTrans.Manager().cliUcdGetOptsUsage(' ') + \
          'Protocol options:\n' + \
          snmpProto.GetNextRequest().cliUcdGetOptsUsage()
usage = usage + options

# Default options
reportTypeFlag = prtNumFlag = inclOidFlag = None
chkIncOidFlag = 1

# Parse app options
idx = 1; newArgv = []
while idx < len(argv):
    try:
        if argv[idx] == '-h':
            print usage
            exit(0)
        if argv[idx] == '-v':
            if argv[idx+1][:1] != 'v': argv[idx+1] = 'v'+argv[idx+1]
            try:
                snmpProto = eval(argv[idx+1])
            except (NameError, AttributeError):
                stderr.write('Unsupported SNMP protocol version: %s\n%s\n' % \
                             (argv[idx+1], usage))
                exit(-1)
            idx = idx + 2
            continue
        if argv[idx] == '-R':
            reportTypeFlag = 1
            idx = idx + 1
            continue
        if argv[idx] == '-C':
            for c in list(argv[idx+1]):
                if c == 'p': prtNumFlag = 1
                if c == 'i': inclOidFlag = 1
                if c == 'c': chkIncOidFlag = 0
            idx = idx + 2
            continue
    except IndexError:
        stderr.write('Missing value to %s\n%s\n' % (argv[idx], usage))
        exit(-1)
    newArgv.append(argv[idx])
    idx = idx + 1

# Instantiate SNMP entity components
rsp = snmpProto.GetResponse()
getNextReq = snmpProto.GetNextRequest()
manager = snmpTrans.Manager()

# Parse transport and protocol options
try:
    newArgv = manager.cliUcdSetArgs(newArgv)
    tempArgv = getNextReq.cliUcdSetArgs(newArgv)
    if inclOidFlag:
        getReq = snmpProto.GetRequest();
        newArgv = getReq.cliUcdSetArgs(tempArgv)
    else:
        newArgv = tempArgv
except PySnmpError, why:
    stderr.write('Error: %s\n%s\n' % (why, usage))
    exit(-1)

if len(newArgv):
    print 'Extra parameters given: %s\n%s' % (newArgv, usage)
    exit(-1)

# Store tables headers
headVars = map(lambda x: x[0], \
               getNextReq.apiAlphaGetPdu().apiAlphaGetVarBind())

# A counter for printed vars
prtOidCount = 0

# Traverse agent MIB
while 1:
    # Verify against out-of-order messages
    def cb_fun(answer, src):
        # Decode message
        rsp.decode(answer)
        
        # Make sure response matches request
        if req.match(rsp):
            return 1

    # Switch from/to Get/GetNext reqs if requested
    if inclOidFlag:
        req = getReq
        inclOidFlag = None
    else:
        req = getNextReq
        
    # Encode SNMP request message and try to send it to SNMP agent and
    # receive a response
    (answer, src) = manager.send_and_receive(req.encode(), (None, 0), cb_fun)

    # Fetch Object ID's and associated values
    vars = rsp.apiAlphaGetPdu().apiAlphaGetVarBind()

    # Error handling makes sense only when walking
    if req is getNextReq:
        # Check for remote SNMP agent failure
        if rsp.apiAlphaGetPdu().apiAlphaGetErrorStatus():
            errorIndex = rsp.apiAlphaGetPdu().apiAlphaGetErrorIndex().get()-1
            # SNMP agent (v.1) reports 'no such name' when walk is over
            if rsp.apiAlphaGetPdu().apiAlphaGetErrorStatus() == 2:
                # One of the tables exceeded
                for l in vars, headVars:
                    if errorIndex in range(len(l)):
                        del l[errorIndex]
                    else:
                        raise error.ProtoError('Vad ErrorIndex vs VarBind in %s' \
                                               % rsp)
            else:
                errorStatus = rsp.apiAlphaGetPdu().apiAlphaGetErrorStatus()
                if errorIndex in range(len(vars)):
                    raise error.ProtoError(errorStatus + ' at ' + \
                                           str(vars[errorIndex][0]))
                raise error.ProtoError(errorStatus)

        # Exclude completed var-binds
        while 1:
            for idx in range(len(headVars)):
                if not snmpProto.ObjectIdentifier(headVars[idx]).isaprefix(vars[idx][0])\
                       or isinstance(vars[idx][1], v2c.EndOfMibView):
                    # One of the tables exceeded
                    for l in vars, headVars:
                        del l[idx]
                    break
            else:
                break

        # Make sure OIDs are increasing
        if chkIncOidFlag and req is getNextReq:
            badOids = filter(lambda (x, y): x >= y,
                             map(None,
                                 map(lambda x: x[0],
                                     req.apiAlphaGetPdu().apiAlphaGetVarBind()),
                                 map(lambda x: x[0],
                                     rsp.apiAlphaGetPdu().apiAlphaGetVarBind())))
            if len(badOids):
                stderr.write('Error: OID not increasing: %s\n' % badOids)
                break

    if len(headVars) == 0:
        break

    # Print out results
    for (oid, val) in vars:
        print oid, ' ---> ',
        if reportTypeFlag:
            print val
        else:
            print repr(val.getTerminal().get())

        prtOidCount = prtOidCount + 1
    
    # Update request ID
    req.apiAlphaGetPdu().apiAlphaGetRequestId().inc(1)

    # Load get-next'ed vars into new req
    req.apiAlphaGetPdu().apiAlphaSetVarBind(vars)

if prtNumFlag:
    print 'Variables found: %d' % prtOidCount
