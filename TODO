
Sparse notes on major existing problems/plans

* SMI issues remained include:

  1) multiple OID registration should be posible for
     customizing Managed Objects classes
  2) in MIBVIEW object model: MIB module name, MIB object 
     name and object instance should be clearly separated.
     Dedicated, simple API for table cells mangling should be 
     provided.

* Walking over VACM shadowed OIDs is painfully slow

* Notification filtering (RFC3413) not implemented.

* MsgAndPduDispatcher should use TransportDispatcher jobs interface
  to handle SNMPv3 handshake

* Implement 'oneliner' API for v1arch, possibly compatible with v3arch API

* Implement prettyIn value format parser at TC

* Disallow SNMP access to USM objects

* Make sure objects shutdown methods work alright

* Maybe MibInstrumentationController should be async what
  implies callback function interface.

* Re-work ACL to get rid of linear search there

* Implement SNMP trap app

* Implement SNMP proxy example & app

* Check for memory leaks esp. on failed requests

* Implement partial context name match at isAccessAllowed()

* Should managed objects be accessed through some dedicated,
  non-SNMP-based API? A sort of backdoor which is basically
  intrum minus transactions and AC.

* Clean up cache management code at MsgAndPduDsp and MP

* Sort out whether pyasn1 obejcts should probably have either clone() or 
  subtype() methods.

* Convert symbolic constants (keys, SNMP errors) into singular, hashable
  objects for performance and typing reliablity

* Expire discovered snmpEngineIds at mpmod/rfc3412

* Implement by-transportTag search at secmod/rfc2576

* Review PDU components coercion code at proxy/rfc2576

* TextualConvention subclassing order now depends upon DisplayHint 
  clause presense in MIB definition (for useful prettyIn/Out()). Maybe 
  this should be re-worked.

* Implement snmptranslate tool

* exclude SNMP-COMMUNITY-MIB from view for better security
